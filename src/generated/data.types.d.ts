/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/data/workspaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Workspaces
         * @description Get public workspaces and workspaces associated with the authenticated user.
         */
        get: operations["iam_views_workspace_get_workspaces"];
        put?: never;
        /**
         * Create Workspace
         * @description Create a new workspace owned by the authenticated user.
         */
        post: operations["iam_views_workspace_create_workspace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/workspaces/{workspace_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Workspace
         * @description Get workspace details.
         */
        get: operations["iam_views_workspace_get_workspace"];
        put?: never;
        post?: never;
        /**
         * Delete Workspace
         * @description Delete a workspace owned by the authenticated user.
         */
        delete: operations["iam_views_workspace_delete_workspace"];
        options?: never;
        head?: never;
        /**
         * Update Workspace
         * @description Update a workspace owned by the authenticated user.
         */
        patch: operations["iam_views_workspace_update_workspace"];
        trace?: never;
    };
    "/api/data/workspaces/{workspace_id}/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Accept Workspace Transfer
         * @description Accept a pending workspace transfer.
         */
        put: operations["iam_views_workspace_accept_workspace_transfer"];
        /**
         * Transfer Workspace
         * @description Transfer a workspace owned by the authenticated user to another HydroServer user.
         */
        post: operations["iam_views_workspace_transfer_workspace"];
        /**
         * Reject Workspace Transfer
         * @description Reject a pending workspace transfer.
         */
        delete: operations["iam_views_workspace_reject_workspace_transfer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/workspaces/{workspace_id}/collaborators": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Collaborators
         * @description Get all collaborators associated with a workspace.
         */
        get: operations["iam_views_collaborator_get_collaborators"];
        /**
         * Edit Collaborator Role
         * @description Edit a collaborator's role in a workspace.
         */
        put: operations["iam_views_collaborator_edit_collaborator_role"];
        /**
         * Add Collaborator
         * @description Add a collaborator to a workspace.
         */
        post: operations["iam_views_collaborator_add_collaborator"];
        /**
         * Remove Collaborator
         * @description Remove a collaborator from a workspace.
         */
        delete: operations["iam_views_collaborator_remove_collaborator"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/workspaces/{workspace_id}/api-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Api Keys
         * @description Get API keys associated with the authenticated user.
         */
        get: operations["iam_views_api_key_get_api_keys"];
        put?: never;
        /**
         * Create Api Key
         * @description Create a new API key for the workspace.
         */
        post: operations["iam_views_api_key_create_api_key"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/workspaces/{workspace_id}/api-keys/{api_key_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Api Key
         * @description Get API key details.
         */
        get: operations["iam_views_api_key_get_api_key"];
        put?: never;
        post?: never;
        /**
         * Delete Api Key
         * @description Delete an API key.
         */
        delete: operations["iam_views_api_key_delete_api_key"];
        options?: never;
        head?: never;
        /**
         * Update Api Key
         * @description Update an API key.
         */
        patch: operations["iam_views_api_key_update_api_key"];
        trace?: never;
    };
    "/api/data/workspaces/{workspace_id}/api-keys/{api_key_id}/regenerate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Regenerate Api Key
         * @description Regenerate an API key using existing settings.
         */
        put: operations["iam_views_api_key_regenerate_api_key"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Roles
         * @description Get public Roles and Roles associated with the authenticated user.
         */
        get: operations["iam_views_role_get_roles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/roles/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Role
         * @description Get a Role.
         */
        get: operations["iam_views_role_get_role"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/things": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Things
         * @description Get public Things and Things associated with the authenticated user.
         */
        get: operations["sta_views_thing_get_things"];
        put?: never;
        /**
         * Create Thing
         * @description Create a new Thing.
         */
        post: operations["sta_views_thing_create_thing"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/things/tags/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Thing Tag Keys
         * @description Get all existing unique thing tag keys.
         */
        get: operations["sta_views_thing_get_thing_tag_keys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/things/site-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Site Types
         * @description Get site types.
         */
        get: operations["sta_views_thing_get_site_types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/things/sampling-feature-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Sampling Feature Types
         * @description Get sampling feature types.
         */
        get: operations["sta_views_thing_get_sampling_feature_types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/things/file-attachment-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get File Attachment Types
         * @description Get file attachment types.
         */
        get: operations["sta_views_thing_get_file_attachment_types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/things/{thing_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Thing
         * @description Get a Thing.
         */
        get: operations["sta_views_thing_get_thing"];
        put?: never;
        post?: never;
        /**
         * Delete Thing
         * @description Delete a Thing.
         */
        delete: operations["sta_views_thing_delete_thing"];
        options?: never;
        head?: never;
        /**
         * Update Thing
         * @description Update a Thing.
         */
        patch: operations["sta_views_thing_update_thing"];
        trace?: never;
    };
    "/api/data/things/{thing_id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Thing Tags
         * @description Get all tags associated with a Thing.
         */
        get: operations["sta_views_thing_get_thing_tags"];
        /**
         * Edit Thing Tag
         * @description Edit a tag of a Thing.
         */
        put: operations["sta_views_thing_edit_thing_tag"];
        /**
         * Add Thing Tag
         * @description Add a tag to a Thing.
         */
        post: operations["sta_views_thing_add_thing_tag"];
        /**
         * Remove Thing Tag
         * @description Remove a tag from a Thing.
         */
        delete: operations["sta_views_thing_remove_thing_tag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/things/{thing_id}/file-attachments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Thing File Attachments
         * @description Get all file attachments associated with a Thing.
         */
        get: operations["sta_views_thing_get_thing_file_attachments"];
        put?: never;
        /**
         * Add Thing File Attachment
         * @description Add a file attachment to a thing.
         */
        post: operations["sta_views_thing_add_thing_file_attachment"];
        /**
         * Remove Thing File Attachment
         * @description Remove a file attachment from a thing.
         */
        delete: operations["sta_views_thing_remove_thing_file_attachment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/things/{thing_id}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Thing Archive
         * @description Get HydroShare archival details for a thing.
         */
        get: operations["etl_views_hydroshare_archival_get_thing_archive"];
        put?: never;
        /**
         * Create Thing Archive
         * @description Create a HydroShare data archive for a thing.
         */
        post: operations["etl_views_hydroshare_archival_create_thing_archive"];
        /**
         * Delete Archive
         * @description Delete a HydroShare data archive for a thing. Note: This will not delete the HydroShare resource.
         */
        delete: operations["etl_views_hydroshare_archival_delete_archive"];
        options?: never;
        head?: never;
        /**
         * Update Archive
         * @description Update HydroShare data archive details for a thing.
         */
        patch: operations["etl_views_hydroshare_archival_update_archive"];
        trace?: never;
    };
    "/api/data/things/{thing_id}/archive/trigger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run Thing Archival
         * @description Archive thing data to HydroShare.
         */
        post: operations["etl_views_hydroshare_archival_run_thing_archival"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/datastreams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Datastreams
         * @description Get public Datastreams and Datastreams associated with the authenticated user.
         */
        get: operations["sta_views_datastream_get_datastreams"];
        put?: never;
        /**
         * Create Datastream
         * @description Create a new Datastream.
         */
        post: operations["sta_views_datastream_create_datastream"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/datastreams/tags/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Datastream Tag Keys
         * @description Get all existing unique datastream tag keys.
         */
        get: operations["sta_views_datastream_get_datastream_tag_keys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/datastreams/aggregation-statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Datastream Aggregation Statistics
         * @description Get datastream aggregation statistics.
         */
        get: operations["sta_views_datastream_get_datastream_aggregation_statistics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/datastreams/statuses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Datastream Statuses
         * @description Get datastream statuses.
         */
        get: operations["sta_views_datastream_get_datastream_statuses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/datastreams/sampled-mediums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Datastream Sampled Mediums
         * @description Get datastream sampled mediums.
         */
        get: operations["sta_views_datastream_get_datastream_sampled_mediums"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/datastreams/file-attachment-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get File Attachment Types
         * @description Get file attachment types.
         */
        get: operations["sta_views_datastream_get_file_attachment_types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/datastreams/{datastream_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Datastream
         * @description Get a Datastream.
         */
        get: operations["sta_views_datastream_get_datastream"];
        put?: never;
        post?: never;
        /**
         * Delete Datastream
         * @description Delete a Datastream.
         */
        delete: operations["sta_views_datastream_delete_datastream"];
        options?: never;
        head?: never;
        /**
         * Update Datastream
         * @description Update a Datastream.
         */
        patch: operations["sta_views_datastream_update_datastream"];
        trace?: never;
    };
    "/api/data/datastreams/{datastream_id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Datastream Tags
         * @description Get all tags associated with a Datastream.
         */
        get: operations["sta_views_datastream_get_datastream_tags"];
        /**
         * Edit Datastream Tag
         * @description Edit a tag of a Datastream.
         */
        put: operations["sta_views_datastream_edit_datastream_tag"];
        /**
         * Add Datastream Tag
         * @description Add a tag to a Datastream.
         */
        post: operations["sta_views_datastream_add_datastream_tag"];
        /**
         * Remove Datastream Tag
         * @description Remove a tag from a Datastream.
         */
        delete: operations["sta_views_datastream_remove_datastream_tag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/datastreams/{datastream_id}/file-attachments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Datastream File Attachments
         * @description Get all file attachments associated with a Datastream.
         */
        get: operations["sta_views_datastream_get_datastream_file_attachments"];
        put?: never;
        /**
         * Add Datastream File Attachment
         * @description Add a file attachment to a datastream.
         */
        post: operations["sta_views_datastream_add_datastream_file_attachment"];
        /**
         * Remove Datastream File Attachment
         * @description Remove a file attachment from a datastream.
         */
        delete: operations["sta_views_datastream_remove_datastream_file_attachment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/datastreams/{datastream_id}/csv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Datastream Csv
         * @description Get a CSV representation of the Datastream.
         */
        get: operations["sta_views_datastream_get_datastream_csv"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/datastreams/{datastream_id}/observations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Observations
         * @description Get Datastream Observations.
         */
        get: operations["sta_views_observation_get_observations"];
        put?: never;
        /**
         * Create Observation
         * @description Create a new Observation.
         */
        post: operations["sta_views_observation_create_observation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/datastreams/{datastream_id}/observations/bulk-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Insert Observations
         * @description Insert Datastream Observations.
         */
        post: operations["sta_views_observation_insert_observations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/datastreams/{datastream_id}/observations/bulk-delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete Observations
         * @description Delete Datastream Observations between the given phenomenon start and end times.
         */
        post: operations["sta_views_observation_delete_observations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/datastreams/{datastream_id}/observations/{observation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Observation
         * @description Get an Observation.
         */
        get: operations["sta_views_observation_get_observation"];
        put?: never;
        post?: never;
        /**
         * Delete Observation
         * @description Delete an Observation.
         */
        delete: operations["sta_views_observation_delete_observation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/observed-properties": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Observed Properties
         * @description Get public Observed Properties and Observed Properties associated with the authenticated user.
         */
        get: operations["sta_views_observed_property_get_observed_properties"];
        put?: never;
        /**
         * Create Observed Property
         * @description Create a new Observed Property.
         */
        post: operations["sta_views_observed_property_create_observed_property"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/observed-properties/variable-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Datastream Aggregation Statistics
         * @description Get variable types.
         */
        get: operations["sta_views_observed_property_get_datastream_aggregation_statistics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/observed-properties/{observed_property_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Observed Property
         * @description Get an Observed Property.
         */
        get: operations["sta_views_observed_property_get_observed_property"];
        put?: never;
        post?: never;
        /**
         * Delete Observed Property
         * @description Delete an Observed Property.
         */
        delete: operations["sta_views_observed_property_delete_observed_property"];
        options?: never;
        head?: never;
        /**
         * Update Observed Property
         * @description Update an Observed Property.
         */
        patch: operations["sta_views_observed_property_update_observed_property"];
        trace?: never;
    };
    "/api/data/units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Units
         * @description Get public Units and Units associated with the authenticated user.
         */
        get: operations["sta_views_unit_get_units"];
        put?: never;
        /**
         * Create Unit
         * @description Create a new Unit.
         */
        post: operations["sta_views_unit_create_unit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/units/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Unit Types
         * @description Get unit types.
         */
        get: operations["sta_views_unit_get_unit_types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/units/{unit_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Unit
         * @description Get a Unit.
         */
        get: operations["sta_views_unit_get_unit"];
        put?: never;
        post?: never;
        /**
         * Delete Unit
         * @description Delete a Unit.
         */
        delete: operations["sta_views_unit_delete_unit"];
        options?: never;
        head?: never;
        /**
         * Update Unit
         * @description Update a Unit.
         */
        patch: operations["sta_views_unit_update_unit"];
        trace?: never;
    };
    "/api/data/sensors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Sensors
         * @description Get public Sensors and Sensors associated with the authenticated user.
         */
        get: operations["sta_views_sensor_get_sensors"];
        put?: never;
        /**
         * Create Sensor
         * @description Create a new Sensor.
         */
        post: operations["sta_views_sensor_create_sensor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/sensors/encoding-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Sensor Encoding Types
         * @description Get sensor encoding types.
         */
        get: operations["sta_views_sensor_get_sensor_encoding_types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/sensors/method-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Method Types
         * @description Get method types.
         */
        get: operations["sta_views_sensor_get_method_types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/sensors/{sensor_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Sensor
         * @description Get a Sensor.
         */
        get: operations["sta_views_sensor_get_sensor"];
        put?: never;
        post?: never;
        /**
         * Delete Sensor
         * @description Delete a Sensor.
         */
        delete: operations["sta_views_sensor_delete_sensor"];
        options?: never;
        head?: never;
        /**
         * Update Sensor
         * @description Update a Sensor.
         */
        patch: operations["sta_views_sensor_update_sensor"];
        trace?: never;
    };
    "/api/data/processing-levels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Processing Levels
         * @description Get public Processing Levels and Processing Levels associated with the authenticated user.
         */
        get: operations["sta_views_processing_level_get_processing_levels"];
        put?: never;
        /**
         * Create Processing Level
         * @description Create a new Processing Level.
         */
        post: operations["sta_views_processing_level_create_processing_level"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/processing-levels/{processing_level_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Processing Level
         * @description Get a Processing Level.
         */
        get: operations["sta_views_processing_level_get_processing_level"];
        put?: never;
        post?: never;
        /**
         * Delete Processing Level
         * @description Delete a Processing Level.
         */
        delete: operations["sta_views_processing_level_delete_processing_level"];
        options?: never;
        head?: never;
        /**
         * Update Processing Level
         * @description Update a Processing Level.
         */
        patch: operations["sta_views_processing_level_update_processing_level"];
        trace?: never;
    };
    "/api/data/result-qualifiers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Result Qualifiers
         * @description Get public Result Qualifiers and Result Qualifiers associated with the authenticated user.
         */
        get: operations["sta_views_result_qualifier_get_result_qualifiers"];
        put?: never;
        /**
         * Create Result Qualifier
         * @description Create a new Result Qualifier.
         */
        post: operations["sta_views_result_qualifier_create_result_qualifier"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/result-qualifiers/{result_qualifier_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Result Qualifier
         * @description Get a Result Qualifier.
         */
        get: operations["sta_views_result_qualifier_get_result_qualifier"];
        put?: never;
        post?: never;
        /**
         * Delete Result Qualifier
         * @description Delete a Result Qualifier.
         */
        delete: operations["sta_views_result_qualifier_delete_result_qualifier"];
        options?: never;
        head?: never;
        /**
         * Update Result Qualifier
         * @description Update a Result Qualifier.
         */
        patch: operations["sta_views_result_qualifier_update_result_qualifier"];
        trace?: never;
    };
    "/api/data/orchestration-systems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Orchestration Systems
         * @description Get public Orchestration Systems and Orchestration Systems associated with the authenticated user.
         */
        get: operations["etl_views_orchestration_system_get_orchestration_systems"];
        put?: never;
        /**
         * Create Orchestration System
         * @description Create a new Orchestration System.
         */
        post: operations["etl_views_orchestration_system_create_orchestration_system"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/orchestration-systems/{orchestration_system_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Orchestration System
         * @description Get an Orchestration System.
         */
        get: operations["etl_views_orchestration_system_get_orchestration_system"];
        put?: never;
        post?: never;
        /**
         * Delete Orchestration System
         * @description Delete an Orchestration System.
         */
        delete: operations["etl_views_orchestration_system_delete_orchestration_system"];
        options?: never;
        head?: never;
        /**
         * Update Orchestration System
         * @description Update an Orchestration System.
         */
        patch: operations["etl_views_orchestration_system_update_orchestration_system"];
        trace?: never;
    };
    "/api/data/data-sources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Data Sources
         * @description Get public Data Sources and Data Sources associated with the authenticated user.
         */
        get: operations["etl_views_data_source_get_data_sources"];
        put?: never;
        /**
         * Create Data Source
         * @description Create a new Data Source.
         */
        post: operations["etl_views_data_source_create_data_source"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/data-sources/{data_source_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Data Source
         * @description Get a Data Source.
         */
        get: operations["etl_views_data_source_get_data_source"];
        put?: never;
        post?: never;
        /**
         * Delete Data Source
         * @description Delete a Data Source.
         */
        delete: operations["etl_views_data_source_delete_data_source"];
        options?: never;
        head?: never;
        /**
         * Update Data Source
         * @description Update a Data Source.
         */
        patch: operations["etl_views_data_source_update_data_source"];
        trace?: never;
    };
    "/api/data/data-sources/{data_source_id}/datastreams/{datastream_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Link Datastream
         * @description Link a Datastream to a Data Source.
         */
        post: operations["etl_views_data_source_link_datastream"];
        /**
         * Unlink Datastream
         * @description Unlink a Datastream from a Data Source.
         */
        delete: operations["etl_views_data_source_unlink_datastream"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/data-archives": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Data Archives
         * @description Get public Data Archives and Data Archives associated with the authenticated user.
         */
        get: operations["etl_views_data_archive_get_data_archives"];
        put?: never;
        /**
         * Create Data Archive
         * @description Create a new Data Archive.
         */
        post: operations["etl_views_data_archive_create_data_archive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/data-archives/{data_archive_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Data Archive
         * @description Get a Data Archive.
         */
        get: operations["etl_views_data_archive_get_data_archive"];
        put?: never;
        post?: never;
        /**
         * Delete Data Archive
         * @description Delete a Data Archive.
         */
        delete: operations["etl_views_data_archive_delete_data_archive"];
        options?: never;
        head?: never;
        /**
         * Update Data Archive
         * @description Update a Data Archive.
         */
        patch: operations["etl_views_data_archive_update_data_archive"];
        trace?: never;
    };
    "/api/data/data-archives/{data_archive_id}/datastreams/{datastream_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Link Datastream
         * @description Link a Datastream to a Data Archive.
         */
        post: operations["etl_views_data_archive_link_datastream"];
        /**
         * Unlink Datastream
         * @description Unlink a Datastream from a Data Archive.
         */
        delete: operations["etl_views_data_archive_unlink_datastream"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** WorkspaceQueryParameters */
        WorkspaceQueryParameters: {
            /**
             * Page
             * @description Page number (1-based).
             */
            page?: number | null;
            /**
             * Page Size
             * @description The number of items per page.
             */
            page_size?: number | null;
            /** Expand Related */
            expand_related?: boolean | null;
            /**
             * Order By
             * @description Select one or more fields to order the response by.
             * @default []
             */
            order_by: ("name" | "isPrivate" | "-name" | "-isPrivate")[] | null;
            /**
             * Is Associated
             * @description Whether the workspace is associated with the authenticated user
             */
            is_associated?: boolean | null;
            /**
             * Is Private
             * @description Whether the returned workspaces should be private or public.
             */
            is_private?: boolean | null;
        };
        /** AccountContactDetailResponse */
        AccountContactDetailResponse: {
            /** Phone */
            phone?: string | null;
            /** Address */
            address?: string | null;
            /** Link */
            link?: string | null;
            /** Type */
            type: string;
            /** Name */
            name: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Organizationname */
            organizationName?: string | null;
        };
        /** PermissionDetailResponse */
        PermissionDetailResponse: {
            /**
             * Resource
             * @enum {string}
             */
            resource: "*" | "APIKey" | "Role" | "Collaborator" | "DataSource" | "DataArchive" | "OrchestrationSystem" | "Thing" | "Datastream" | "Observation" | "Sensor" | "ObservedProperty" | "ProcessingLevel" | "Unit" | "ResultQualifier";
            /**
             * Action
             * @enum {string}
             */
            action: "*" | "view" | "create" | "edit" | "delete";
        };
        /** RoleDetailResponse */
        RoleDetailResponse: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Isuserrole */
            isUserRole: boolean;
            /** Isapikeyrole */
            isAPIKeyRole: boolean;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            workspace: components["schemas"]["WorkspaceDetailResponse"] | null;
            /** Permissions */
            permissions: components["schemas"]["PermissionDetailResponse"][];
        };
        /** WorkspaceDetailResponse */
        WorkspaceDetailResponse: {
            /** Name */
            name: string;
            /** Isprivate */
            isPrivate: boolean;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            owner: components["schemas"]["AccountContactDetailResponse"];
            collaboratorRole?: components["schemas"]["RoleDetailResponse"] | null;
            pendingTransferTo?: components["schemas"]["AccountContactDetailResponse"] | null;
        };
        /** WorkspaceSummaryResponse */
        WorkspaceSummaryResponse: {
            /** Name */
            name: string;
            /** Isprivate */
            isPrivate: boolean;
            /**
             * Id
             * Format: uuid
             */
            id: string;
        };
        /** WorkspacePostBody */
        WorkspacePostBody: {
            /** Name */
            name: string;
            /** Isprivate */
            isPrivate: boolean;
        };
        /** WorkspacePatchBody */
        WorkspacePatchBody: {
            /** Name */
            name?: string;
            /** Isprivate */
            isPrivate?: boolean;
        };
        /** WorkspaceTransferBody */
        WorkspaceTransferBody: {
            /**
             * Newowner
             * Format: email
             */
            newOwner: string;
        };
        /** CollaboratorQueryParameters */
        CollaboratorQueryParameters: {
            /**
             * Page
             * @description Page number (1-based).
             */
            page?: number | null;
            /**
             * Page Size
             * @description The number of items per page.
             */
            page_size?: number | null;
            /**
             * Role Id
             * @description Filter collaborators by role ID.
             * @default []
             */
            role_id: string[];
        };
        /** CollaboratorDetailResponse */
        CollaboratorDetailResponse: {
            user: components["schemas"]["AccountContactDetailResponse"];
            role: components["schemas"]["RoleSummaryResponse"];
        };
        /** RoleSummaryResponse */
        RoleSummaryResponse: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Isuserrole */
            isUserRole: boolean;
            /** Isapikeyrole */
            isAPIKeyRole: boolean;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Workspaceid */
            workspaceId: string | null;
            /** Permissions */
            permissions: components["schemas"]["PermissionDetailResponse"][];
        };
        /** CollaboratorPostBody */
        CollaboratorPostBody: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /**
             * Roleid
             * Format: uuid
             */
            roleId: string;
        };
        /** CollaboratorDeleteBody */
        CollaboratorDeleteBody: {
            /**
             * Email
             * Format: email
             */
            email: string;
        };
        /** APIKeyQueryParameters */
        APIKeyQueryParameters: {
            /**
             * Page
             * @description Page number (1-based).
             */
            page?: number | null;
            /**
             * Page Size
             * @description The number of items per page.
             */
            page_size?: number | null;
            /** Expand Related */
            expand_related?: boolean | null;
            /**
             * Order By
             * @description Select one or more fields to order the response by.
             * @default []
             */
            order_by: ("name" | "isActive" | "expiresAt" | "-name" | "-isActive" | "-expiresAt")[] | null;
            /**
             * Role Id
             * @description Filter API keys by role ID.
             * @default []
             */
            role_id: string[];
        };
        /** APIKeyDetailResponse */
        APIKeyDetailResponse: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Isactive */
            isActive: boolean;
            /** Expiresat */
            expiresAt?: string | null;
            /** Createdat */
            createdAt: string;
            /** Lastused */
            lastUsed: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            workspace: components["schemas"]["WorkspaceSummaryResponse"];
            role: components["schemas"]["RoleSummaryResponse"];
        };
        /** APIKeySummaryResponse */
        APIKeySummaryResponse: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Isactive */
            isActive: boolean;
            /** Expiresat */
            expiresAt?: string | null;
            /** Createdat */
            createdAt: string;
            /** Lastused */
            lastUsed: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Workspaceid
             * Format: uuid
             */
            workspaceId: string;
            /**
             * Roleid
             * Format: uuid
             */
            roleId: string;
        };
        /** APIKeyDetailPostResponse */
        APIKeyDetailPostResponse: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Isactive */
            isActive: boolean;
            /** Expiresat */
            expiresAt?: string | null;
            /** Createdat */
            createdAt: string;
            /** Lastused */
            lastUsed: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            workspace: components["schemas"]["WorkspaceSummaryResponse"];
            role: components["schemas"]["RoleSummaryResponse"];
            /** Key */
            key: string;
        };
        /** APIKeySummaryPostResponse */
        APIKeySummaryPostResponse: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Isactive */
            isActive: boolean;
            /** Expiresat */
            expiresAt?: string | null;
            /** Createdat */
            createdAt: string;
            /** Lastused */
            lastUsed: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Workspaceid
             * Format: uuid
             */
            workspaceId: string;
            /**
             * Roleid
             * Format: uuid
             */
            roleId: string;
            /** Key */
            key: string;
        };
        /** APIKeyPostBody */
        APIKeyPostBody: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Isactive */
            isActive: boolean;
            /** Expiresat */
            expiresAt?: string | null;
            /**
             * Roleid
             * Format: uuid
             */
            roleId: string;
        };
        /** APIKeyPatchBody */
        APIKeyPatchBody: {
            /** Name */
            name?: string;
            /** Description */
            description?: string | null;
            /** Isactive */
            isActive?: boolean;
            /** Expiresat */
            expiresAt?: string | null;
            /** Roleid */
            roleId?: string | null;
        };
        /** RoleQueryParameters */
        RoleQueryParameters: {
            /**
             * Page
             * @description Page number (1-based).
             */
            page?: number | null;
            /**
             * Page Size
             * @description The number of items per page.
             */
            page_size?: number | null;
            /** Expand Related */
            expand_related?: boolean | null;
            /**
             * Order By
             * @description Select one or more fields to order the response by.
             * @default []
             */
            order_by: ("name" | "isUserRole" | "isAPIKeyRole" | "-name" | "-isUserRole" | "-isAPIKeyRole")[] | null;
            /**
             * Workspace Id
             * @description Filter roles by workspace ID.
             * @default []
             */
            workspace_id: (string | "null")[];
            /**
             * Is User Role
             * @description Controls whether the returned roles should be user roles.
             */
            is_user_role?: boolean | null;
            /**
             * Is Apikey Role
             * @description Controls whether the returned roles should be API key roles.
             */
            is_apikey_role?: boolean | null;
        };
        /** ThingQueryParameters */
        ThingQueryParameters: {
            /**
             * Page
             * @description Page number (1-based).
             */
            page?: number | null;
            /**
             * Page Size
             * @description The number of items per page.
             */
            page_size?: number | null;
            /** Expand Related */
            expand_related?: boolean | null;
            /**
             * Order By
             * @description Select one or more fields to order the response by.
             * @default []
             */
            order_by: ("name" | "samplingFeatureType" | "samplingFeatureCode" | "siteType" | "isPrivate" | "latitude" | "longitude" | "elevation_m" | "elevationDatum" | "state" | "county" | "country" | "-name" | "-samplingFeatureType" | "-samplingFeatureCode" | "-siteType" | "-isPrivate" | "-latitude" | "-longitude" | "-elevation_m" | "-elevationDatum" | "-state" | "-county" | "-country")[] | null;
            /**
             * Workspace Id
             * @description Filter things by workspace ID.
             * @default []
             */
            workspace_id: string[];
            /**
             * Bbox
             * @description Filter things by bounding box. Format bounding box as {min_lon},{min_lat},{max_lon},{max_lat}
             * @default []
             */
            bbox: string[];
            /**
             * State
             * @description Filter things by state.
             * @default []
             */
            state: string[];
            /**
             * County
             * @description Filter things by county.
             * @default []
             */
            county: string[];
            /**
             * Country
             * @description Filter things by country.
             * @default []
             */
            country: string[];
            /**
             * Site Type
             * @description Filter things by site type.
             * @default []
             */
            site_type: string[];
            /**
             * Sampling Feature Type
             * @description Filter things by sampling feature type.
             * @default []
             */
            sampling_feature_type: string[];
            /**
             * Tag
             * @description Filter things by tag. Format tag filters as {key}:{value}
             * @default []
             */
            tag: string[];
            /**
             * Is Private
             * @description Controls whether the returned things should be private or public.
             */
            is_private?: boolean | null;
        };
        /** FileAttachmentGetResponse */
        FileAttachmentGetResponse: {
            /** Name */
            name: string;
            /** Link */
            link: string;
            /** Fileattachmenttype */
            fileAttachmentType: string;
        };
        /** LocationDetailResponse */
        LocationDetailResponse: {
            /** Latitude */
            latitude: number;
            /** Longitude */
            longitude: number;
            /** Elevation M */
            elevation_m?: number | null;
            /** Elevationdatum */
            elevationDatum?: string | null;
            /** State */
            state?: string | null;
            /** County */
            county?: string | null;
            /** Country */
            country?: string | null;
        };
        /** TagGetResponse */
        TagGetResponse: {
            /** Key */
            key: string;
            /** Value */
            value: string;
        };
        /** ThingDetailResponse */
        ThingDetailResponse: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Samplingfeaturetype */
            samplingFeatureType: string;
            /** Samplingfeaturecode */
            samplingFeatureCode: string;
            /** Sitetype */
            siteType: string;
            /** Datadisclaimer */
            dataDisclaimer?: string | null;
            /** Isprivate */
            isPrivate: boolean;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            workspace: components["schemas"]["WorkspaceSummaryResponse"];
            location: components["schemas"]["LocationDetailResponse"];
            /** Tags */
            tags: components["schemas"]["TagGetResponse"][];
            /** Fileattachments */
            fileAttachments: components["schemas"]["FileAttachmentGetResponse"][];
        };
        /** ThingSummaryResponse */
        ThingSummaryResponse: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Samplingfeaturetype */
            samplingFeatureType: string;
            /** Samplingfeaturecode */
            samplingFeatureCode: string;
            /** Sitetype */
            siteType: string;
            /** Datadisclaimer */
            dataDisclaimer?: string | null;
            /** Isprivate */
            isPrivate: boolean;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Workspaceid
             * Format: uuid
             */
            workspaceId: string;
            location: components["schemas"]["LocationDetailResponse"];
            /** Tags */
            tags: components["schemas"]["TagGetResponse"][];
            /** Fileattachments */
            fileAttachments: components["schemas"]["FileAttachmentGetResponse"][];
        };
        /** LocationPostBody */
        LocationPostBody: {
            /** Latitude */
            latitude: number;
            /** Longitude */
            longitude: number;
            /** Elevation M */
            elevation_m?: number | null;
            /** Elevationdatum */
            elevationDatum?: string | null;
            /** State */
            state?: string | null;
            /** County */
            county?: string | null;
            /** Country */
            country?: string | null;
        };
        /** ThingPostBody */
        ThingPostBody: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Samplingfeaturetype */
            samplingFeatureType: string;
            /** Samplingfeaturecode */
            samplingFeatureCode: string;
            /** Sitetype */
            siteType: string;
            /** Datadisclaimer */
            dataDisclaimer?: string | null;
            /** Isprivate */
            isPrivate: boolean;
            /**
             * Workspaceid
             * Format: uuid
             */
            workspaceId: string;
            location: components["schemas"]["LocationPostBody"];
        };
        /** VocabularyQueryParameters */
        VocabularyQueryParameters: {
            /**
             * Page
             * @description Page number (1-based).
             */
            page?: number | null;
            /**
             * Page Size
             * @description The number of items per page.
             */
            page_size?: number | null;
            /**
             * Order Desc
             * @description Sort terms by descending.
             * @default false
             */
            order_desc: boolean | null;
        };
        /** LocationPatchBody */
        LocationPatchBody: {
            /** Latitude */
            latitude?: number;
            /** Longitude */
            longitude?: number;
            /** Elevation M */
            elevation_m?: number | null;
            /** Elevationdatum */
            elevationDatum?: string | null;
            /** State */
            state?: string | null;
            /** County */
            county?: string | null;
            /** Country */
            country?: string | null;
        };
        /** ThingPatchBody */
        ThingPatchBody: {
            /** Name */
            name?: string;
            /** Description */
            description?: string;
            /** Samplingfeaturetype */
            samplingFeatureType?: string;
            /** Samplingfeaturecode */
            samplingFeatureCode?: string;
            /** Sitetype */
            siteType?: string;
            /** Datadisclaimer */
            dataDisclaimer?: string | null;
            /** Isprivate */
            isPrivate?: boolean;
            location?: components["schemas"]["LocationPatchBody"] | null;
        };
        /** TagPostBody */
        TagPostBody: {
            /** Key */
            key: string;
            /** Value */
            value: string;
        };
        /** TagDeleteBody */
        TagDeleteBody: {
            /** Key */
            key: string;
            /** Value */
            value?: string | null;
        };
        /** FileAttachmentDeleteBody */
        FileAttachmentDeleteBody: {
            /** Name */
            name: string;
        };
        /** HydroShareArchivalDetailResponse */
        HydroShareArchivalDetailResponse: {
            /** Link */
            link?: string | null;
            /** Frequency */
            frequency?: ("daily" | "weekly" | "monthly") | null;
            /** Path */
            path: string;
            /** Datastreamids */
            datastreamIds: string[];
            /** Thingid */
            thingId: string | null;
        };
        /** HydroShareArchivalPostBody */
        HydroShareArchivalPostBody: {
            /** Link */
            link?: string | null;
            /** Frequency */
            frequency?: ("daily" | "weekly" | "monthly") | null;
            /** Path */
            path: string;
            /** Datastreamids */
            datastreamIds: string[];
            /** Resourcetitle */
            resourceTitle?: string | null;
            /** Resourceabstract */
            resourceAbstract?: string | null;
            /** Resourcekeywords */
            resourceKeywords?: string[] | null;
            /**
             * Publicresource
             * @default false
             */
            publicResource: boolean;
        };
        /** HydroShareArchivalPatchBody */
        HydroShareArchivalPatchBody: {
            /** Link */
            link?: string | null;
            /** Frequency */
            frequency?: ("daily" | "weekly" | "monthly") | null;
            /** Path */
            path?: string;
            /** Datastreamids */
            datastreamIds?: string[];
        };
        /** DatastreamQueryParameters */
        DatastreamQueryParameters: {
            /**
             * Page
             * @description Page number (1-based).
             */
            page?: number | null;
            /**
             * Page Size
             * @description The number of items per page.
             */
            page_size?: number | null;
            /** Expand Related */
            expand_related?: boolean | null;
            /**
             * Order By
             * @description Select one or more fields to order the response by.
             * @default []
             */
            order_by: ("name" | "observationType" | "sampledMedium" | "status" | "resultType" | "isPrivate" | "valueCount" | "phenomenonBeginTime" | "phenomenonEndTime" | "resultBeginTime" | "resultEndTime" | "-name" | "-observationType" | "-sampledMedium" | "-status" | "-resultType" | "-isPrivate" | "-valueCount" | "-phenomenonBeginTime" | "-phenomenonEndTime" | "-resultBeginTime" | "-resultEndTime")[] | null;
            /**
             * Workspace Id
             * @description Filter datastreams by workspace ID.
             * @default []
             */
            workspace_id: string[];
            /**
             * Thing Id
             * @description Filter datastreams by thing ID.
             * @default []
             */
            thing_id: string[];
            /**
             * Sensor Id
             * @description Filter datastreams by sensor ID.
             * @default []
             */
            sensor_id: string[];
            /**
             * Observed Property Id
             * @description Filter datastreams by observed property ID.
             * @default []
             */
            observed_property_id: string[];
            /**
             * Processing Level Id
             * @description Filter datastreams by processing level ID.
             * @default []
             */
            processing_level_id: string[];
            /**
             * Unit Id
             * @description Filter datastreams by unit ID.
             * @default []
             */
            unit_id: string[];
            /**
             * Result Qualifier Id
             * @description Filter datastreams by observation result qualifier ID.
             * @default []
             */
            result_qualifier_id: string[];
            /**
             * Data Source Id
             * @description Filter datastreams by data source ID.
             * @default []
             */
            data_source_id: string[];
            /**
             * Data Archive Id
             * @description Filter datastreams by data archive ID.
             * @default []
             */
            data_archive_id: string[];
            /**
             * Observation Type
             * @description Filter things by observation type.
             * @default []
             */
            observation_type: string[];
            /**
             * Sampled Medium
             * @description Filter things by sampled medium.
             * @default []
             */
            sampled_medium: string[];
            /**
             * Status
             * @description Filter things by status.
             * @default []
             */
            status: string[];
            /**
             * Result Type
             * @description Filter things by result type.
             * @default []
             */
            result_type: string[];
            /**
             * Is Private
             * @description Controls whether the datastreams should be private or public.
             */
            is_private?: boolean | null;
            /**
             * Value Count Max
             * @description Sets the maximum value count of filtered datastreams.
             */
            value_count_max?: number | null;
            /**
             * Value Count Min
             * @description Sets the minimum value count of filtered datastreams.
             */
            value_count_min?: number | null;
            /**
             * Phenomenon Begin Time Max
             * @description Sets the maximum phenomenon begin time of filtered datastreams.
             */
            phenomenon_begin_time_max?: string | null;
            /**
             * Phenomenon Begin Time Min
             * @description Sets the minimum phenomenon begin time of filtered datastreams.
             */
            phenomenon_begin_time_min?: string | null;
            /**
             * Phenomenon End Time Max
             * @description Sets the maximum phenomenon end time of filtered datastreams.
             */
            phenomenon_end_time_max?: string | null;
            /**
             * Phenomenon End Time Min
             * @description Sets the minimum phenomenon end time of filtered datastreams.
             */
            phenomenon_end_time_min?: string | null;
            /**
             * Result Begin Time Max
             * @description Sets the maximum result begin time of filtered datastreams.
             */
            result_begin_time_max?: string | null;
            /**
             * Result Begin Time Min
             * @description Sets the minimum result begin time of filtered datastreams.
             */
            result_begin_time_min?: string | null;
            /**
             * Result End Time Max
             * @description Sets the maximum result end time of filtered datastreams.
             */
            result_end_time_max?: string | null;
            /**
             * Result End Time Min
             * @description Sets the minimum result end time of filtered datastreams.
             */
            result_end_time_min?: string | null;
        };
        /** DataSourceSummaryResponse */
        DataSourceSummaryResponse: {
            /** Name */
            name: string;
            /** Settings */
            settings?: Record<string, never> | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Workspaceid
             * Format: uuid
             */
            workspaceId: string;
            /**
             * Orchestrationsystemid
             * Format: uuid
             */
            orchestrationSystemId: string;
            schedule?: components["schemas"]["OrchestrationConfigurationScheduleDetailResponse"] | null;
            status?: components["schemas"]["OrchestrationConfigurationStatusDetailResponse"] | null;
        };
        /** DatastreamDetailResponse */
        DatastreamDetailResponse: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Observationtype */
            observationType: string;
            /** Sampledmedium */
            sampledMedium: string;
            /** Nodatavalue */
            noDataValue: number;
            /** Aggregationstatistic */
            aggregationStatistic: string;
            /** Timeaggregationinterval */
            timeAggregationInterval: number;
            /** Status */
            status?: string | null;
            /** Resulttype */
            resultType: string;
            /** Valuecount */
            valueCount?: number | null;
            /** Phenomenonbegintime */
            phenomenonBeginTime?: string | null;
            /** Phenomenonendtime */
            phenomenonEndTime?: string | null;
            /** Resultbegintime */
            resultBeginTime?: string | null;
            /** Resultendtime */
            resultEndTime?: string | null;
            /**
             * Isprivate
             * @default false
             */
            isPrivate: boolean;
            /**
             * Isvisible
             * @default true
             */
            isVisible: boolean;
            /**
             * Timeaggregationintervalunit
             * @enum {string}
             */
            timeAggregationIntervalUnit: "seconds" | "minutes" | "hours" | "days";
            /** Intendedtimespacing */
            intendedTimeSpacing?: number | null;
            /** Intendedtimespacingunit */
            intendedTimeSpacingUnit?: ("seconds" | "minutes" | "hours" | "days") | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            dataSource: components["schemas"]["DataSourceSummaryResponse"] | null;
            workspace: components["schemas"]["WorkspaceSummaryResponse"];
            thing: components["schemas"]["ThingSummaryResponse"];
            sensor: components["schemas"]["SensorSummaryResponse"];
            observedProperty: components["schemas"]["ObservedPropertySummaryResponse"];
            processingLevel: components["schemas"]["ProcessingLevelSummaryResponse"];
            unit: components["schemas"]["UnitSummaryResponse"];
            /** Tags */
            tags: components["schemas"]["TagGetResponse"][];
            /** Fileattachments */
            fileAttachments: components["schemas"]["FileAttachmentGetResponse"][];
        };
        /** DatastreamSummaryResponse */
        DatastreamSummaryResponse: {
            /** Datasourceid */
            dataSourceId?: string | null;
            /**
             * Thingid
             * Format: uuid
             */
            thingId: string;
            /**
             * Sensorid
             * Format: uuid
             */
            sensorId: string;
            /**
             * Observedpropertyid
             * Format: uuid
             */
            observedPropertyId: string;
            /**
             * Processinglevelid
             * Format: uuid
             */
            processingLevelId: string;
            /**
             * Unitid
             * Format: uuid
             */
            unitId: string;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Observationtype */
            observationType: string;
            /** Sampledmedium */
            sampledMedium: string;
            /** Nodatavalue */
            noDataValue: number;
            /** Aggregationstatistic */
            aggregationStatistic: string;
            /** Timeaggregationinterval */
            timeAggregationInterval: number;
            /** Status */
            status?: string | null;
            /** Resulttype */
            resultType: string;
            /** Valuecount */
            valueCount?: number | null;
            /** Phenomenonbegintime */
            phenomenonBeginTime?: string | null;
            /** Phenomenonendtime */
            phenomenonEndTime?: string | null;
            /** Resultbegintime */
            resultBeginTime?: string | null;
            /** Resultendtime */
            resultEndTime?: string | null;
            /**
             * Isprivate
             * @default false
             */
            isPrivate: boolean;
            /**
             * Isvisible
             * @default true
             */
            isVisible: boolean;
            /**
             * Timeaggregationintervalunit
             * @enum {string}
             */
            timeAggregationIntervalUnit: "seconds" | "minutes" | "hours" | "days";
            /** Intendedtimespacing */
            intendedTimeSpacing?: number | null;
            /** Intendedtimespacingunit */
            intendedTimeSpacingUnit?: ("seconds" | "minutes" | "hours" | "days") | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Workspace Id
             * Format: uuid
             */
            workspace_id: string;
            /** Tags */
            tags: components["schemas"]["TagGetResponse"][];
            /** Fileattachments */
            fileAttachments: components["schemas"]["FileAttachmentGetResponse"][];
        };
        /** ObservedPropertySummaryResponse */
        ObservedPropertySummaryResponse: {
            /** Name */
            name: string;
            /** Definition */
            definition: string;
            /** Description */
            description: string;
            /** Type */
            type: string;
            /** Code */
            code: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Workspaceid */
            workspaceId?: string | null;
        };
        /** OrchestrationConfigurationScheduleDetailResponse */
        OrchestrationConfigurationScheduleDetailResponse: {
            /** Interval */
            interval?: number | null;
            /** Intervalunits */
            intervalUnits?: ("minutes" | "hours" | "days") | null;
            /** Crontab */
            crontab?: string | null;
            /** Starttime */
            startTime?: string | null;
            /** Endtime */
            endTime?: string | null;
        };
        /** OrchestrationConfigurationStatusDetailResponse */
        OrchestrationConfigurationStatusDetailResponse: {
            /** Lastrunsuccessful */
            lastRunSuccessful?: boolean | null;
            /** Lastrunmessage */
            lastRunMessage?: string | null;
            /** Lastrun */
            lastRun?: string | null;
            /** Nextrun */
            nextRun?: string | null;
            /**
             * Paused
             * @default false
             */
            paused: boolean;
        };
        /** ProcessingLevelSummaryResponse */
        ProcessingLevelSummaryResponse: {
            /** Code */
            code: string;
            /** Definition */
            definition?: string | null;
            /** Explanation */
            explanation?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Workspaceid */
            workspaceId: string | null;
        };
        /** SensorSummaryResponse */
        SensorSummaryResponse: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /**
             * Encodingtype
             * @enum {string}
             */
            encodingType: "application/pdf" | "http://www.opengis.net/doc/IS/SensorML/2.0" | "text/html" | "application/json";
            /** Manufacturer */
            manufacturer?: string | null;
            /** Model */
            model?: string | null;
            /** Modellink */
            modelLink?: string | null;
            /** Methodtype */
            methodType: string;
            /** Methodlink */
            methodLink?: string | null;
            /** Methodcode */
            methodCode?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Workspaceid */
            workspaceId: string | null;
        };
        /** UnitSummaryResponse */
        UnitSummaryResponse: {
            /** Name */
            name: string;
            /** Symbol */
            symbol: string;
            /** Definition */
            definition: string;
            /** Type */
            type: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Workspaceid */
            workspaceId: string | null;
        };
        /** DatastreamPostBody */
        DatastreamPostBody: {
            /** Datasourceid */
            dataSourceId?: string | null;
            /**
             * Thingid
             * Format: uuid
             */
            thingId: string;
            /**
             * Sensorid
             * Format: uuid
             */
            sensorId: string;
            /**
             * Observedpropertyid
             * Format: uuid
             */
            observedPropertyId: string;
            /**
             * Processinglevelid
             * Format: uuid
             */
            processingLevelId: string;
            /**
             * Unitid
             * Format: uuid
             */
            unitId: string;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Observationtype */
            observationType: string;
            /** Sampledmedium */
            sampledMedium: string;
            /** Nodatavalue */
            noDataValue: number;
            /** Aggregationstatistic */
            aggregationStatistic: string;
            /** Timeaggregationinterval */
            timeAggregationInterval: number;
            /** Status */
            status?: string | null;
            /** Resulttype */
            resultType: string;
            /** Valuecount */
            valueCount?: number | null;
            /** Phenomenonbegintime */
            phenomenonBeginTime?: string | null;
            /** Phenomenonendtime */
            phenomenonEndTime?: string | null;
            /** Resultbegintime */
            resultBeginTime?: string | null;
            /** Resultendtime */
            resultEndTime?: string | null;
            /**
             * Isprivate
             * @default false
             */
            isPrivate: boolean;
            /**
             * Isvisible
             * @default true
             */
            isVisible: boolean;
            /**
             * Timeaggregationintervalunit
             * @enum {string}
             */
            timeAggregationIntervalUnit: "seconds" | "minutes" | "hours" | "days";
            /** Intendedtimespacing */
            intendedTimeSpacing?: number | null;
            /** Intendedtimespacingunit */
            intendedTimeSpacingUnit?: ("seconds" | "minutes" | "hours" | "days") | null;
        };
        /** DatastreamPatchBody */
        DatastreamPatchBody: {
            /** Datasourceid */
            dataSourceId?: string | null;
            /**
             * Thingid
             * Format: uuid
             */
            thingId?: string;
            /**
             * Sensorid
             * Format: uuid
             */
            sensorId?: string;
            /**
             * Observedpropertyid
             * Format: uuid
             */
            observedPropertyId?: string;
            /**
             * Processinglevelid
             * Format: uuid
             */
            processingLevelId?: string;
            /**
             * Unitid
             * Format: uuid
             */
            unitId?: string;
            /** Name */
            name?: string;
            /** Description */
            description?: string;
            /** Observationtype */
            observationType?: string;
            /** Sampledmedium */
            sampledMedium?: string;
            /** Nodatavalue */
            noDataValue?: number;
            /** Aggregationstatistic */
            aggregationStatistic?: string;
            /** Timeaggregationinterval */
            timeAggregationInterval?: number;
            /** Status */
            status?: string | null;
            /** Resulttype */
            resultType?: string;
            /** Valuecount */
            valueCount?: number | null;
            /** Phenomenonbegintime */
            phenomenonBeginTime?: string | null;
            /** Phenomenonendtime */
            phenomenonEndTime?: string | null;
            /** Resultbegintime */
            resultBeginTime?: string | null;
            /** Resultendtime */
            resultEndTime?: string | null;
            /** Isprivate */
            isPrivate?: boolean;
            /** Isvisible */
            isVisible?: boolean;
            /**
             * Timeaggregationintervalunit
             * @enum {string}
             */
            timeAggregationIntervalUnit?: "seconds" | "minutes" | "hours" | "days";
            /** Intendedtimespacing */
            intendedTimeSpacing?: number | null;
            /** Intendedtimespacingunit */
            intendedTimeSpacingUnit?: ("seconds" | "minutes" | "hours" | "days") | null;
        };
        /** ObservationQueryParameters */
        ObservationQueryParameters: {
            /**
             * Page
             * @description Page number (1-based).
             */
            page?: number | null;
            /**
             * Page Size
             * @description The number of items per page.
             */
            page_size?: number | null;
            /** Expand Related */
            expand_related?: boolean | null;
            /**
             * Order By
             * @description Select one or more fields to order the response by.
             * @default []
             */
            order_by: ("phenomenonTime" | "-phenomenonTime")[] | null;
            /**
             * Format
             * @description Controls the format of the observations response.
             */
            format?: ("record" | "row" | "column") | null;
            /**
             * Phenomenon Time Max
             * @description Sets the maximum phenomenon time of filtered observations.
             */
            phenomenon_time_max?: string | null;
            /**
             * Phenomenon Time Min
             * @description Sets the minimum phenomenon time of filtered observations.
             */
            phenomenon_time_min?: string | null;
            /**
             * Result Qualifier Code
             * @description Filter observations by result qualifier code.
             * @default []
             */
            result_qualifier_code: string[];
        };
        /** ObservationColumnarResponse */
        ObservationColumnarResponse: {
            /** Phenomenontime */
            phenomenonTime: unknown[];
            /** Result */
            result: unknown[];
            /** Resultqualifiercodes */
            resultQualifierCodes: unknown[];
        };
        /** ObservationDetailResponse */
        ObservationDetailResponse: {
            /** Phenomenontime */
            phenomenonTime: string;
            /** Result */
            result: number;
            /**
             * Resultqualifiercodes
             * @default []
             */
            resultQualifierCodes: string[];
            /**
             * Id
             * Format: uuid
             */
            id: string;
            workspace: components["schemas"]["WorkspaceSummaryResponse"];
            datastream: components["schemas"]["DatastreamSummaryResponse"];
        };
        /** ObservationRowResponse */
        ObservationRowResponse: {
            /** Fields */
            fields: ("phenomenonTime" | "result" | "resultQualifierCodes")[];
            /** Data */
            data: unknown[][];
        };
        /** ObservationSummaryResponse */
        ObservationSummaryResponse: {
            /** Phenomenontime */
            phenomenonTime: string;
            /** Result */
            result: number;
            /**
             * Resultqualifiercodes
             * @default []
             */
            resultQualifierCodes: string[];
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Workspaceid
             * Format: uuid
             */
            workspaceId: string;
            /**
             * Datastreamid
             * Format: uuid
             */
            datastreamId: string;
        };
        /** ObservationPostBody */
        ObservationPostBody: {
            /** Phenomenontime */
            phenomenonTime: string;
            /** Result */
            result: number;
            /**
             * Resultqualifiercodes
             * @default []
             */
            resultQualifierCodes: string[];
        };
        /** ObservationBulkPostQueryParameters */
        ObservationBulkPostQueryParameters: {
            /**
             * Mode
             * @description Specifies how new observations are added to the datastream. `insert` allows observations at any timestamp. `append` adds only future observations (after the latest existing timestamp). `backfill` adds only historical observations (before the earliest existing timestamp). `replace` deletes all observations in the range of provided observations before inserting new ones.
             */
            mode?: ("insert" | "append" | "backfill" | "replace") | null;
        };
        /** ObservationBulkPostBody */
        ObservationBulkPostBody: {
            /** Fields */
            fields: ("phenomenonTime" | "result" | "resultQualifierCodes")[];
            /** Data */
            data: unknown[][];
        };
        /** ObservationBulkDeleteBody */
        ObservationBulkDeleteBody: {
            /** Phenomenontimestart */
            phenomenonTimeStart?: string | null;
            /** Phenomenontimeend */
            phenomenonTimeEnd?: string | null;
        };
        /** ObservedPropertyQueryParameters */
        ObservedPropertyQueryParameters: {
            /**
             * Page
             * @description Page number (1-based).
             */
            page?: number | null;
            /**
             * Page Size
             * @description The number of items per page.
             */
            page_size?: number | null;
            /** Expand Related */
            expand_related?: boolean | null;
            /**
             * Order By
             * @description Select one or more fields to order the response by.
             * @default []
             */
            order_by: ("name" | "type" | "code" | "-name" | "-type" | "-code")[] | null;
            /**
             * Workspace Id
             * @description Filter observed properties by workspace ID.
             * @default []
             */
            workspace_id: (string | "null")[];
            /**
             * Thing Id
             * @description Filter observed properties by thing ID.
             * @default []
             */
            thing_id: (string | "null")[];
            /**
             * Datastream Id
             * @description Filter observed properties by datastream ID.
             * @default []
             */
            datastream_id: (string | "null")[];
            /**
             * Type
             * @description Filter observed properties by type
             * @default []
             */
            type: string[];
        };
        /** ObservedPropertyDetailResponse */
        ObservedPropertyDetailResponse: {
            /** Name */
            name: string;
            /** Definition */
            definition: string;
            /** Description */
            description: string;
            /** Type */
            type: string;
            /** Code */
            code: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            workspace: components["schemas"]["WorkspaceSummaryResponse"] | null;
        };
        /** ObservedPropertyPostBody */
        ObservedPropertyPostBody: {
            /** Name */
            name: string;
            /** Definition */
            definition: string;
            /** Description */
            description: string;
            /** Type */
            type: string;
            /** Code */
            code: string;
            /** Workspaceid */
            workspaceId: string | null;
        };
        /** ObservedPropertyPatchBody */
        ObservedPropertyPatchBody: {
            /** Name */
            name?: string;
            /** Definition */
            definition?: string;
            /** Description */
            description?: string;
            /** Type */
            type?: string;
            /** Code */
            code?: string;
        };
        /** UnitQueryParameters */
        UnitQueryParameters: {
            /**
             * Page
             * @description Page number (1-based).
             */
            page?: number | null;
            /**
             * Page Size
             * @description The number of items per page.
             */
            page_size?: number | null;
            /** Expand Related */
            expand_related?: boolean | null;
            /**
             * Order By
             * @description Select one or more fields to order the response by.
             * @default []
             */
            order_by: ("name" | "symbol" | "type" | "-name" | "-symbol" | "-type")[] | null;
            /**
             * Workspace Id
             * @description Filter units by workspace ID.
             * @default []
             */
            workspace_id: (string | "null")[];
            /**
             * Thing Id
             * @description Filter units by thing ID.
             * @default []
             */
            thing_id: (string | "null")[];
            /**
             * Datastream Id
             * @description Filter units by datastream ID.
             * @default []
             */
            datastream_id: (string | "null")[];
            /**
             * Type
             * @description Filter units by type
             * @default []
             */
            type: string[];
        };
        /** UnitDetailResponse */
        UnitDetailResponse: {
            /** Name */
            name: string;
            /** Symbol */
            symbol: string;
            /** Definition */
            definition: string;
            /** Type */
            type: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            workspace: components["schemas"]["WorkspaceSummaryResponse"] | null;
        };
        /** UnitPostBody */
        UnitPostBody: {
            /** Name */
            name: string;
            /** Symbol */
            symbol: string;
            /** Definition */
            definition: string;
            /** Type */
            type: string;
            /** Workspaceid */
            workspaceId?: string | null;
        };
        /** UnitPatchBody */
        UnitPatchBody: {
            /** Name */
            name?: string;
            /** Symbol */
            symbol?: string;
            /** Definition */
            definition?: string;
            /** Type */
            type?: string;
        };
        /** SensorQueryParameters */
        SensorQueryParameters: {
            /**
             * Page
             * @description Page number (1-based).
             */
            page?: number | null;
            /**
             * Page Size
             * @description The number of items per page.
             */
            page_size?: number | null;
            /** Expand Related */
            expand_related?: boolean | null;
            /**
             * Order By
             * @description Select one or more fields to order the response by.
             * @default []
             */
            order_by: ("name" | "encodingType" | "manufacturer" | "model" | "methodType" | "methodCode" | "-name" | "-encodingType" | "-manufacturer" | "-model" | "-methodType" | "-methodCode")[] | null;
            /**
             * Workspace Id
             * @description Filter sensors by workspace ID.
             * @default []
             */
            workspace_id: (string | "null")[];
            /**
             * Thing Id
             * @description Filter sensors by thing ID.
             * @default []
             */
            thing_id: (string | "null")[];
            /**
             * Datastream Id
             * @description Filter sensors by datastream ID.
             * @default []
             */
            datastream_id: (string | "null")[];
            /**
             * Encoding Type
             * @description Filter sensors by encodingType
             * @default []
             */
            encoding_type: string[];
            /**
             * Manufacturer
             * @description Filter sensors by manufacturer
             * @default []
             */
            manufacturer: string[];
            /**
             * Method Type
             * @description Filter sensors by methodType
             * @default []
             */
            method_type: string[];
        };
        /** SensorDetailResponse */
        SensorDetailResponse: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /**
             * Encodingtype
             * @enum {string}
             */
            encodingType: "application/pdf" | "http://www.opengis.net/doc/IS/SensorML/2.0" | "text/html" | "application/json";
            /** Manufacturer */
            manufacturer?: string | null;
            /** Model */
            model?: string | null;
            /** Modellink */
            modelLink?: string | null;
            /** Methodtype */
            methodType: string;
            /** Methodlink */
            methodLink?: string | null;
            /** Methodcode */
            methodCode?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            workspace: components["schemas"]["WorkspaceSummaryResponse"] | null;
        };
        /** SensorPostBody */
        SensorPostBody: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /**
             * Encodingtype
             * @enum {string}
             */
            encodingType: "application/pdf" | "http://www.opengis.net/doc/IS/SensorML/2.0" | "text/html" | "application/json";
            /** Manufacturer */
            manufacturer?: string | null;
            /** Model */
            model?: string | null;
            /** Modellink */
            modelLink?: string | null;
            /** Methodtype */
            methodType: string;
            /** Methodlink */
            methodLink?: string | null;
            /** Methodcode */
            methodCode?: string | null;
            /** Workspaceid */
            workspaceId?: string | null;
        };
        /** SensorPatchBody */
        SensorPatchBody: {
            /** Name */
            name?: string;
            /** Description */
            description?: string;
            /**
             * Encodingtype
             * @enum {string}
             */
            encodingType?: "application/pdf" | "http://www.opengis.net/doc/IS/SensorML/2.0" | "text/html" | "application/json";
            /** Manufacturer */
            manufacturer?: string | null;
            /** Model */
            model?: string | null;
            /** Modellink */
            modelLink?: string | null;
            /** Methodtype */
            methodType?: string;
            /** Methodlink */
            methodLink?: string | null;
            /** Methodcode */
            methodCode?: string | null;
        };
        /** ProcessingLevelQueryParameters */
        ProcessingLevelQueryParameters: {
            /**
             * Page
             * @description Page number (1-based).
             */
            page?: number | null;
            /**
             * Page Size
             * @description The number of items per page.
             */
            page_size?: number | null;
            /** Expand Related */
            expand_related?: boolean | null;
            /**
             * Order By
             * @description Select one or more fields to order the response by.
             * @default []
             */
            order_by: ("code" | "-code")[] | null;
            /**
             * Workspace Id
             * @description Filter processing levels by workspace ID.
             * @default []
             */
            workspace_id: (string | "null")[];
            /**
             * Thing Id
             * @description Filter processing levels by thing ID.
             * @default []
             */
            thing_id: (string | "null")[];
            /**
             * Datastream Id
             * @description Filter processing levels by datastream ID.
             * @default []
             */
            datastream_id: (string | "null")[];
        };
        /** ProcessingLevelDetailResponse */
        ProcessingLevelDetailResponse: {
            /** Code */
            code: string;
            /** Definition */
            definition?: string | null;
            /** Explanation */
            explanation?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            workspace: components["schemas"]["WorkspaceSummaryResponse"] | null;
        };
        /** ProcessingLevelPostBody */
        ProcessingLevelPostBody: {
            /** Code */
            code: string;
            /** Definition */
            definition?: string | null;
            /** Explanation */
            explanation?: string | null;
            /** Workspaceid */
            workspaceId?: string | null;
        };
        /** ProcessingLevelPatchBody */
        ProcessingLevelPatchBody: {
            /** Code */
            code?: string;
            /** Definition */
            definition?: string | null;
            /** Explanation */
            explanation?: string | null;
        };
        /** ResultQualifierQueryParameters */
        ResultQualifierQueryParameters: {
            /**
             * Page
             * @description Page number (1-based).
             */
            page?: number | null;
            /**
             * Page Size
             * @description The number of items per page.
             */
            page_size?: number | null;
            /** Expand Related */
            expand_related?: boolean | null;
            /**
             * Order By
             * @description Select one or more fields to order the response by.
             * @default []
             */
            order_by: ("code" | "-code")[] | null;
            /**
             * Workspace Id
             * @description Filter sensors by workspace ID.
             * @default []
             */
            workspace_id: (string | "null")[];
            /**
             * Thing Id
             * @description Filter result qualifiers by thing ID.
             * @default []
             */
            thing_id: (string | "null")[];
            /**
             * Datastream Id
             * @description Filter result qualifiers by datastream ID.
             * @default []
             */
            datastream_id: (string | "null")[];
        };
        /** ResultQualifierDetailResponse */
        ResultQualifierDetailResponse: {
            /** Code */
            code: string;
            /** Description */
            description: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            workspace: components["schemas"]["WorkspaceSummaryResponse"] | null;
        };
        /** ResultQualifierSummaryResponse */
        ResultQualifierSummaryResponse: {
            /** Code */
            code: string;
            /** Description */
            description: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Workspaceid */
            workspaceId: string | null;
        };
        /** ResultQualifierPostBody */
        ResultQualifierPostBody: {
            /** Code */
            code: string;
            /** Description */
            description: string;
            /** Workspaceid */
            workspaceId?: string | null;
        };
        /** ResultQualifierPatchBody */
        ResultQualifierPatchBody: {
            /** Code */
            code?: string;
            /** Description */
            description?: string;
        };
        /** OrchestrationSystemQueryParameters */
        OrchestrationSystemQueryParameters: {
            /**
             * Page
             * @description Page number (1-based).
             */
            page?: number | null;
            /**
             * Page Size
             * @description The number of items per page.
             */
            page_size?: number | null;
            /** Expand Related */
            expand_related?: boolean | null;
            /**
             * Order By
             * @description Select one or more fields to order the response by.
             * @default []
             */
            order_by: ("name" | "type" | "-name" | "-type")[] | null;
            /**
             * Workspace Id
             * @description Filter sensors by workspace ID.
             * @default []
             */
            workspace_id: (string | "null")[];
            /**
             * Type
             * @description Filter orchestration systems by type.
             * @default []
             */
            type: string[];
        };
        /** OrchestrationSystemDetailResponse */
        OrchestrationSystemDetailResponse: {
            /** Name */
            name: string;
            /** Type */
            type: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            workspace: components["schemas"]["WorkspaceSummaryResponse"] | null;
        };
        /** OrchestrationSystemSummaryResponse */
        OrchestrationSystemSummaryResponse: {
            /** Name */
            name: string;
            /** Type */
            type: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Workspaceid */
            workspaceId: string | null;
        };
        /** OrchestrationSystemPostBody */
        OrchestrationSystemPostBody: {
            /** Name */
            name: string;
            /** Type */
            type: string;
            /** Workspaceid */
            workspaceId?: string | null;
        };
        /** OrchestrationSystemPatchBody */
        OrchestrationSystemPatchBody: {
            /** Name */
            name?: string;
            /** Type */
            type?: string;
        };
        /** OrchestrationConfigurationQueryParameters */
        OrchestrationConfigurationQueryParameters: {
            /**
             * Page
             * @description Page number (1-based).
             */
            page?: number | null;
            /**
             * Page Size
             * @description The number of items per page.
             */
            page_size?: number | null;
            /** Expand Related */
            expand_related?: boolean | null;
            /**
             * Order By
             * @description Select one or more fields to order the response by.
             * @default []
             */
            order_by: ("name" | "startTime" | "endTime" | "-name" | "-startTime" | "-endTime")[] | null;
            /**
             * Workspace Id
             * @description Filter by workspace ID.
             * @default []
             */
            workspace_id: string[];
            /**
             * Orchestration System Id
             * @description Filter by orchestration system ID.
             * @default []
             */
            orchestration_system_id: string[];
            /**
             * Datastream Id
             * @description Filter by associated datastream ID.
             * @default []
             */
            datastream_id: string[];
            /**
             * Last Run Successful
             * @description Filters by whether the previous job ran successfully.
             */
            last_run_successful?: boolean | null;
            /**
             * Last Run Max
             * @description Sets the maximum last run time of filtered datastreams.
             */
            last_run_max?: string | null;
            /**
             * Last Run Min
             * @description Sets the minimum last run time of filtered datastreams.
             */
            last_run_min?: string | null;
            /**
             * Next Run Max
             * @description Sets the maximum next run time of filtered datastreams.
             */
            next_run_max?: string | null;
            /**
             * Next Run Min
             * @description Sets the minimum next run time of filtered datastreams.
             */
            next_run_min?: string | null;
        };
        /** DataSourceDetailResponse */
        DataSourceDetailResponse: {
            /** Name */
            name: string;
            /** Settings */
            settings?: Record<string, never> | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Workspaceid
             * Format: uuid
             */
            workspaceId: string;
            orchestrationSystem: components["schemas"]["OrchestrationSystemSummaryResponse"];
            schedule?: components["schemas"]["OrchestrationConfigurationScheduleDetailResponse"] | null;
            status?: components["schemas"]["OrchestrationConfigurationStatusDetailResponse"] | null;
            /** Datastreams */
            datastreams?: components["schemas"]["DatastreamSummaryResponse"][] | null;
        };
        /** DataSourcePostBody */
        DataSourcePostBody: {
            /** Name */
            name: string;
            /** Settings */
            settings?: Record<string, never> | null;
            /**
             * Workspaceid
             * Format: uuid
             */
            workspaceId: string;
            /**
             * Orchestrationsystemid
             * Format: uuid
             */
            orchestrationSystemId: string;
            schedule?: components["schemas"]["OrchestrationConfigurationSchedulePostBody"] | null;
            status?: components["schemas"]["OrchestrationConfigurationStatusPostBody"] | null;
            /** Datastreamids */
            datastreamIds?: string[] | null;
        };
        /** OrchestrationConfigurationSchedulePostBody */
        OrchestrationConfigurationSchedulePostBody: {
            /** Interval */
            interval?: number | null;
            /** Intervalunits */
            intervalUnits?: ("minutes" | "hours" | "days") | null;
            /** Crontab */
            crontab?: string | null;
            /** Starttime */
            startTime?: string | null;
            /** Endtime */
            endTime?: string | null;
        };
        /** OrchestrationConfigurationStatusPostBody */
        OrchestrationConfigurationStatusPostBody: {
            /** Lastrunsuccessful */
            lastRunSuccessful?: boolean | null;
            /** Lastrunmessage */
            lastRunMessage?: string | null;
            /** Lastrun */
            lastRun?: string | null;
            /** Nextrun */
            nextRun?: string | null;
            /**
             * Paused
             * @default false
             */
            paused: boolean;
        };
        /** DataSourcePatchBody */
        DataSourcePatchBody: {
            /** Name */
            name?: string;
            /** Settings */
            settings?: Record<string, never> | null;
            /** Orchestrationsystemid */
            orchestrationSystemId?: string | null;
            schedule?: components["schemas"]["OrchestrationConfigurationSchedulePatchBody"] | null;
            status?: components["schemas"]["OrchestrationConfigurationStatusPatchBody"] | null;
        };
        /** OrchestrationConfigurationSchedulePatchBody */
        OrchestrationConfigurationSchedulePatchBody: {
            /** Interval */
            interval?: number | null;
            /** Intervalunits */
            intervalUnits?: ("minutes" | "hours" | "days") | null;
            /** Crontab */
            crontab?: string | null;
            /** Starttime */
            startTime?: string | null;
            /** Endtime */
            endTime?: string | null;
        };
        /** OrchestrationConfigurationStatusPatchBody */
        OrchestrationConfigurationStatusPatchBody: {
            /** Lastrunsuccessful */
            lastRunSuccessful?: boolean | null;
            /** Lastrunmessage */
            lastRunMessage?: string | null;
            /** Lastrun */
            lastRun?: string | null;
            /** Nextrun */
            nextRun?: string | null;
            /** Paused */
            paused?: boolean;
        };
        /** DataArchiveDetailResponse */
        DataArchiveDetailResponse: {
            /** Name */
            name: string;
            /** Settings */
            settings?: Record<string, never> | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            workspace: components["schemas"]["WorkspaceSummaryResponse"];
            orchestrationSystem: components["schemas"]["OrchestrationSystemSummaryResponse"];
            schedule?: components["schemas"]["OrchestrationConfigurationScheduleDetailResponse"] | null;
            status?: components["schemas"]["OrchestrationConfigurationStatusDetailResponse"] | null;
            /** Datastreams */
            datastreams?: components["schemas"]["DatastreamSummaryResponse"][] | null;
        };
        /** DataArchiveSummaryResponse */
        DataArchiveSummaryResponse: {
            /** Name */
            name: string;
            /** Settings */
            settings?: Record<string, never> | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Workspaceid
             * Format: uuid
             */
            workspaceId: string;
            /**
             * Orchestrationsystemid
             * Format: uuid
             */
            orchestrationSystemId: string;
            schedule?: components["schemas"]["OrchestrationConfigurationScheduleDetailResponse"] | null;
            status?: components["schemas"]["OrchestrationConfigurationStatusDetailResponse"] | null;
        };
        /** DataArchivePostBody */
        DataArchivePostBody: {
            /** Name */
            name: string;
            /** Settings */
            settings?: Record<string, never> | null;
            /**
             * Workspaceid
             * Format: uuid
             */
            workspaceId: string;
            /**
             * Orchestrationsystemid
             * Format: uuid
             */
            orchestrationSystemId: string;
            schedule?: components["schemas"]["OrchestrationConfigurationSchedulePostBody"] | null;
            status?: components["schemas"]["OrchestrationConfigurationStatusPostBody"] | null;
            /** Datastreamids */
            datastreamIds?: string[] | null;
        };
        /** DataArchivePatchBody */
        DataArchivePatchBody: {
            /** Name */
            name?: string;
            /** Settings */
            settings?: Record<string, never> | null;
            /** Orchestrationsystemid */
            orchestrationSystemId?: string | null;
            schedule?: components["schemas"]["OrchestrationConfigurationSchedulePatchBody"] | null;
            status?: components["schemas"]["OrchestrationConfigurationStatusPatchBody"] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    iam_views_workspace_get_workspaces: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                expand_related?: boolean | null;
                /** @description Select one or more fields to order the response by. */
                order_by?: ("name" | "isPrivate" | "-name" | "-isPrivate")[] | null;
                /** @description Whether the workspace is associated with the authenticated user */
                is_associated?: boolean | null;
                /** @description Whether the returned workspaces should be private or public. */
                is_private?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceDetailResponse"][] | components["schemas"]["WorkspaceSummaryResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    iam_views_workspace_create_workspace: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkspacePostBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceDetailResponse"] | components["schemas"]["WorkspaceSummaryResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    iam_views_workspace_get_workspace: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceDetailResponse"] | components["schemas"]["WorkspaceSummaryResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    iam_views_workspace_delete_workspace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    iam_views_workspace_update_workspace: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkspacePatchBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceDetailResponse"] | components["schemas"]["WorkspaceSummaryResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    iam_views_workspace_accept_workspace_transfer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    iam_views_workspace_transfer_workspace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkspaceTransferBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    iam_views_workspace_reject_workspace_transfer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    iam_views_collaborator_get_collaborators: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                /** @description Filter collaborators by role ID. */
                role_id?: string[];
            };
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CollaboratorDetailResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    iam_views_collaborator_edit_collaborator_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CollaboratorPostBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CollaboratorDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    iam_views_collaborator_add_collaborator: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CollaboratorPostBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CollaboratorDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    iam_views_collaborator_remove_collaborator: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CollaboratorDeleteBody"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    iam_views_api_key_get_api_keys: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                expand_related?: boolean | null;
                /** @description Select one or more fields to order the response by. */
                order_by?: ("name" | "isActive" | "expiresAt" | "-name" | "-isActive" | "-expiresAt")[] | null;
                /** @description Filter API keys by role ID. */
                role_id?: string[];
            };
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIKeySummaryResponse"][] | components["schemas"]["APIKeyDetailResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    iam_views_api_key_create_api_key: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["APIKeyPostBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIKeySummaryPostResponse"] | components["schemas"]["APIKeyDetailPostResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    iam_views_api_key_get_api_key: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                workspace_id: string;
                api_key_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIKeySummaryResponse"] | components["schemas"]["APIKeyDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    iam_views_api_key_delete_api_key: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                api_key_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    iam_views_api_key_update_api_key: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                workspace_id: string;
                api_key_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["APIKeyPatchBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIKeySummaryResponse"] | components["schemas"]["APIKeyDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    iam_views_api_key_regenerate_api_key: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                workspace_id: string;
                api_key_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIKeySummaryPostResponse"] | components["schemas"]["APIKeyDetailPostResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    iam_views_role_get_roles: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                expand_related?: boolean | null;
                /** @description Select one or more fields to order the response by. */
                order_by?: ("name" | "isUserRole" | "isAPIKeyRole" | "-name" | "-isUserRole" | "-isAPIKeyRole")[] | null;
                /** @description Filter roles by workspace ID. */
                workspace_id?: (string | "null")[];
                /** @description Controls whether the returned roles should be user roles. */
                is_user_role?: boolean | null;
                /** @description Controls whether the returned roles should be API key roles. */
                is_apikey_role?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleSummaryResponse"][] | components["schemas"]["RoleDetailResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    iam_views_role_get_role: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                role_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleSummaryResponse"] | components["schemas"]["RoleDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_thing_get_things: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                expand_related?: boolean | null;
                /** @description Select one or more fields to order the response by. */
                order_by?: ("name" | "samplingFeatureType" | "samplingFeatureCode" | "siteType" | "isPrivate" | "latitude" | "longitude" | "elevation_m" | "elevationDatum" | "state" | "county" | "country" | "-name" | "-samplingFeatureType" | "-samplingFeatureCode" | "-siteType" | "-isPrivate" | "-latitude" | "-longitude" | "-elevation_m" | "-elevationDatum" | "-state" | "-county" | "-country")[] | null;
                /** @description Filter things by workspace ID. */
                workspace_id?: string[];
                /** @description Filter things by bounding box. Format bounding box as {min_lon},{min_lat},{max_lon},{max_lat} */
                bbox?: string[];
                /** @description Filter things by state. */
                state?: string[];
                /** @description Filter things by county. */
                county?: string[];
                /** @description Filter things by country. */
                country?: string[];
                /** @description Filter things by site type. */
                site_type?: string[];
                /** @description Filter things by sampling feature type. */
                sampling_feature_type?: string[];
                /** @description Filter things by tag. Format tag filters as {key}:{value} */
                tag?: string[];
                /** @description Controls whether the returned things should be private or public. */
                is_private?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThingSummaryResponse"][] | components["schemas"]["ThingDetailResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_thing_create_thing: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ThingPostBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThingSummaryResponse"] | components["schemas"]["ThingDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_thing_get_thing_tag_keys: {
        parameters: {
            query?: {
                workspace_id?: string | null;
                thing_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_thing_get_site_types: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                /** @description Sort terms by descending. */
                order_desc?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    sta_views_thing_get_sampling_feature_types: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                /** @description Sort terms by descending. */
                order_desc?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    sta_views_thing_get_file_attachment_types: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                /** @description Sort terms by descending. */
                order_desc?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    sta_views_thing_get_thing: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                thing_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThingSummaryResponse"] | components["schemas"]["ThingDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_thing_delete_thing: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                thing_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_thing_update_thing: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                thing_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ThingPatchBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThingSummaryResponse"] | components["schemas"]["ThingDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_thing_get_thing_tags: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                thing_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagGetResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_thing_edit_thing_tag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                thing_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagPostBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagGetResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_thing_add_thing_tag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                thing_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagPostBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagGetResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_thing_remove_thing_tag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                thing_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagDeleteBody"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_thing_get_thing_file_attachments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                thing_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileAttachmentGetResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_thing_add_thing_file_attachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                thing_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** File Attachment Type */
                    file_attachment_type: string;
                    /**
                     * File
                     * Format: binary
                     */
                    file: string;
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileAttachmentGetResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Request Entity Too Large */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_thing_remove_thing_file_attachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                thing_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FileAttachmentDeleteBody"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_hydroshare_archival_get_thing_archive: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                thing_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HydroShareArchivalDetailResponse"] | null;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_hydroshare_archival_create_thing_archive: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                thing_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HydroShareArchivalPostBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HydroShareArchivalDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_hydroshare_archival_delete_archive: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                thing_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_hydroshare_archival_update_archive: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                thing_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HydroShareArchivalPatchBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HydroShareArchivalDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_hydroshare_archival_run_thing_archival: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                thing_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HydroShareArchivalDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_datastream_get_datastreams: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                expand_related?: boolean | null;
                /** @description Select one or more fields to order the response by. */
                order_by?: ("name" | "observationType" | "sampledMedium" | "status" | "resultType" | "isPrivate" | "valueCount" | "phenomenonBeginTime" | "phenomenonEndTime" | "resultBeginTime" | "resultEndTime" | "-name" | "-observationType" | "-sampledMedium" | "-status" | "-resultType" | "-isPrivate" | "-valueCount" | "-phenomenonBeginTime" | "-phenomenonEndTime" | "-resultBeginTime" | "-resultEndTime")[] | null;
                /** @description Filter datastreams by workspace ID. */
                workspace_id?: string[];
                /** @description Filter datastreams by thing ID. */
                thing_id?: string[];
                /** @description Filter datastreams by sensor ID. */
                sensor_id?: string[];
                /** @description Filter datastreams by observed property ID. */
                observed_property_id?: string[];
                /** @description Filter datastreams by processing level ID. */
                processing_level_id?: string[];
                /** @description Filter datastreams by unit ID. */
                unit_id?: string[];
                /** @description Filter datastreams by observation result qualifier ID. */
                result_qualifier_id?: string[];
                /** @description Filter datastreams by data source ID. */
                data_source_id?: string[];
                /** @description Filter datastreams by data archive ID. */
                data_archive_id?: string[];
                /** @description Filter things by observation type. */
                observation_type?: string[];
                /** @description Filter things by sampled medium. */
                sampled_medium?: string[];
                /** @description Filter things by status. */
                status?: string[];
                /** @description Filter things by result type. */
                result_type?: string[];
                /** @description Controls whether the datastreams should be private or public. */
                is_private?: boolean | null;
                /** @description Sets the maximum value count of filtered datastreams. */
                value_count_max?: number | null;
                /** @description Sets the minimum value count of filtered datastreams. */
                value_count_min?: number | null;
                /** @description Sets the maximum phenomenon begin time of filtered datastreams. */
                phenomenon_begin_time_max?: string | null;
                /** @description Sets the minimum phenomenon begin time of filtered datastreams. */
                phenomenon_begin_time_min?: string | null;
                /** @description Sets the maximum phenomenon end time of filtered datastreams. */
                phenomenon_end_time_max?: string | null;
                /** @description Sets the minimum phenomenon end time of filtered datastreams. */
                phenomenon_end_time_min?: string | null;
                /** @description Sets the maximum result begin time of filtered datastreams. */
                result_begin_time_max?: string | null;
                /** @description Sets the minimum result begin time of filtered datastreams. */
                result_begin_time_min?: string | null;
                /** @description Sets the maximum result end time of filtered datastreams. */
                result_end_time_max?: string | null;
                /** @description Sets the minimum result end time of filtered datastreams. */
                result_end_time_min?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatastreamSummaryResponse"][] | components["schemas"]["DatastreamDetailResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_datastream_create_datastream: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatastreamPostBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatastreamSummaryResponse"] | components["schemas"]["DatastreamDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_datastream_get_datastream_tag_keys: {
        parameters: {
            query?: {
                workspace_id?: string | null;
                datastream_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_datastream_get_datastream_aggregation_statistics: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                /** @description Sort terms by descending. */
                order_desc?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    sta_views_datastream_get_datastream_statuses: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                /** @description Sort terms by descending. */
                order_desc?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    sta_views_datastream_get_datastream_sampled_mediums: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                /** @description Sort terms by descending. */
                order_desc?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    sta_views_datastream_get_file_attachment_types: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                /** @description Sort terms by descending. */
                order_desc?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    sta_views_datastream_get_datastream: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                datastream_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatastreamSummaryResponse"] | components["schemas"]["DatastreamDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_datastream_delete_datastream: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datastream_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_datastream_update_datastream: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                datastream_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatastreamPatchBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatastreamSummaryResponse"] | components["schemas"]["DatastreamDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_datastream_get_datastream_tags: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datastream_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagGetResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_datastream_edit_datastream_tag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datastream_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagPostBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagGetResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_datastream_add_datastream_tag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datastream_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagPostBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagGetResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_datastream_remove_datastream_tag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datastream_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagDeleteBody"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_datastream_get_datastream_file_attachments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datastream_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileAttachmentGetResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_datastream_add_datastream_file_attachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datastream_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** File Attachment Type */
                    file_attachment_type: string;
                    /**
                     * File
                     * Format: binary
                     */
                    file: string;
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileAttachmentGetResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Request Entity Too Large */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_datastream_remove_datastream_file_attachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datastream_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FileAttachmentDeleteBody"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_datastream_get_datastream_csv: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datastream_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_observation_get_observations: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                expand_related?: boolean | null;
                /** @description Select one or more fields to order the response by. */
                order_by?: ("phenomenonTime" | "-phenomenonTime")[] | null;
                /** @description Controls the format of the observations response. */
                format?: ("record" | "row" | "column") | null;
                /** @description Sets the maximum phenomenon time of filtered observations. */
                phenomenon_time_max?: string | null;
                /** @description Sets the minimum phenomenon time of filtered observations. */
                phenomenon_time_min?: string | null;
                /** @description Filter observations by result qualifier code. */
                result_qualifier_code?: string[];
            };
            header?: never;
            path: {
                datastream_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObservationSummaryResponse"][] | components["schemas"]["ObservationDetailResponse"][] | components["schemas"]["ObservationRowResponse"] | components["schemas"]["ObservationColumnarResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_observation_create_observation: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                datastream_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ObservationPostBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObservationSummaryResponse"] | components["schemas"]["ObservationDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_observation_insert_observations: {
        parameters: {
            query?: {
                /** @description Specifies how new observations are added to the datastream. `insert` allows observations at any timestamp. `append` adds only future observations (after the latest existing timestamp). `backfill` adds only historical observations (before the earliest existing timestamp). `replace` deletes all observations in the range of provided observations before inserting new ones. */
                mode?: ("insert" | "append" | "backfill" | "replace") | null;
            };
            header?: never;
            path: {
                datastream_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ObservationBulkPostBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_observation_delete_observations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datastream_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ObservationBulkDeleteBody"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_observation_get_observation: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                datastream_id: string;
                observation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObservationSummaryResponse"] | components["schemas"]["ObservationDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_observation_delete_observation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datastream_id: string;
                observation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_observed_property_get_observed_properties: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                expand_related?: boolean | null;
                /** @description Select one or more fields to order the response by. */
                order_by?: ("name" | "type" | "code" | "-name" | "-type" | "-code")[] | null;
                /** @description Filter observed properties by workspace ID. */
                workspace_id?: (string | "null")[];
                /** @description Filter observed properties by thing ID. */
                thing_id?: (string | "null")[];
                /** @description Filter observed properties by datastream ID. */
                datastream_id?: (string | "null")[];
                /** @description Filter observed properties by type */
                type?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObservedPropertySummaryResponse"][] | components["schemas"]["ObservedPropertyDetailResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_observed_property_create_observed_property: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ObservedPropertyPostBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObservedPropertySummaryResponse"] | components["schemas"]["ObservedPropertyDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_observed_property_get_datastream_aggregation_statistics: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                /** @description Sort terms by descending. */
                order_desc?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    sta_views_observed_property_get_observed_property: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                observed_property_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObservedPropertySummaryResponse"] | components["schemas"]["ObservedPropertyDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_observed_property_delete_observed_property: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                observed_property_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_observed_property_update_observed_property: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                observed_property_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ObservedPropertyPatchBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObservedPropertySummaryResponse"] | components["schemas"]["ObservedPropertyDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_unit_get_units: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                expand_related?: boolean | null;
                /** @description Select one or more fields to order the response by. */
                order_by?: ("name" | "symbol" | "type" | "-name" | "-symbol" | "-type")[] | null;
                /** @description Filter units by workspace ID. */
                workspace_id?: (string | "null")[];
                /** @description Filter units by thing ID. */
                thing_id?: (string | "null")[];
                /** @description Filter units by datastream ID. */
                datastream_id?: (string | "null")[];
                /** @description Filter units by type */
                type?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitSummaryResponse"][] | components["schemas"]["UnitDetailResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_unit_create_unit: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UnitPostBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitSummaryResponse"] | components["schemas"]["UnitDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_unit_get_unit_types: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                /** @description Sort terms by descending. */
                order_desc?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    sta_views_unit_get_unit: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                unit_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitSummaryResponse"] | components["schemas"]["UnitDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_unit_delete_unit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                unit_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_unit_update_unit: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                unit_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UnitPatchBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitSummaryResponse"] | components["schemas"]["UnitDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_sensor_get_sensors: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                expand_related?: boolean | null;
                /** @description Select one or more fields to order the response by. */
                order_by?: ("name" | "encodingType" | "manufacturer" | "model" | "methodType" | "methodCode" | "-name" | "-encodingType" | "-manufacturer" | "-model" | "-methodType" | "-methodCode")[] | null;
                /** @description Filter sensors by workspace ID. */
                workspace_id?: (string | "null")[];
                /** @description Filter sensors by thing ID. */
                thing_id?: (string | "null")[];
                /** @description Filter sensors by datastream ID. */
                datastream_id?: (string | "null")[];
                /** @description Filter sensors by encodingType */
                encoding_type?: string[];
                /** @description Filter sensors by manufacturer */
                manufacturer?: string[];
                /** @description Filter sensors by methodType */
                method_type?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SensorSummaryResponse"][] | components["schemas"]["SensorDetailResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_sensor_create_sensor: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SensorPostBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SensorSummaryResponse"] | components["schemas"]["SensorDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_sensor_get_sensor_encoding_types: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                /** @description Sort terms by descending. */
                order_desc?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    sta_views_sensor_get_method_types: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                /** @description Sort terms by descending. */
                order_desc?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    sta_views_sensor_get_sensor: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                sensor_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SensorSummaryResponse"] | components["schemas"]["SensorDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_sensor_delete_sensor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sensor_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_sensor_update_sensor: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                sensor_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SensorPatchBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SensorSummaryResponse"] | components["schemas"]["SensorDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_processing_level_get_processing_levels: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                expand_related?: boolean | null;
                /** @description Select one or more fields to order the response by. */
                order_by?: ("code" | "-code")[] | null;
                /** @description Filter processing levels by workspace ID. */
                workspace_id?: (string | "null")[];
                /** @description Filter processing levels by thing ID. */
                thing_id?: (string | "null")[];
                /** @description Filter processing levels by datastream ID. */
                datastream_id?: (string | "null")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessingLevelSummaryResponse"][] | components["schemas"]["ProcessingLevelDetailResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_processing_level_create_processing_level: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProcessingLevelPostBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessingLevelSummaryResponse"] | components["schemas"]["ProcessingLevelDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_processing_level_get_processing_level: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                processing_level_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessingLevelSummaryResponse"] | components["schemas"]["ProcessingLevelDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_processing_level_delete_processing_level: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                processing_level_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_processing_level_update_processing_level: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                processing_level_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProcessingLevelPatchBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessingLevelSummaryResponse"] | components["schemas"]["ProcessingLevelDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_result_qualifier_get_result_qualifiers: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                expand_related?: boolean | null;
                /** @description Select one or more fields to order the response by. */
                order_by?: ("code" | "-code")[] | null;
                /** @description Filter sensors by workspace ID. */
                workspace_id?: (string | "null")[];
                /** @description Filter result qualifiers by thing ID. */
                thing_id?: (string | "null")[];
                /** @description Filter result qualifiers by datastream ID. */
                datastream_id?: (string | "null")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultQualifierSummaryResponse"][] | components["schemas"]["ResultQualifierDetailResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_result_qualifier_create_result_qualifier: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResultQualifierPostBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultQualifierSummaryResponse"] | components["schemas"]["ResultQualifierDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_result_qualifier_get_result_qualifier: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                result_qualifier_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultQualifierSummaryResponse"] | components["schemas"]["ResultQualifierDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_result_qualifier_delete_result_qualifier: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                result_qualifier_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    sta_views_result_qualifier_update_result_qualifier: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                result_qualifier_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResultQualifierPatchBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultQualifierSummaryResponse"] | components["schemas"]["ResultQualifierDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_orchestration_system_get_orchestration_systems: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                expand_related?: boolean | null;
                /** @description Select one or more fields to order the response by. */
                order_by?: ("name" | "type" | "-name" | "-type")[] | null;
                /** @description Filter sensors by workspace ID. */
                workspace_id?: (string | "null")[];
                /** @description Filter orchestration systems by type. */
                type?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrchestrationSystemSummaryResponse"][] | components["schemas"]["OrchestrationSystemDetailResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_orchestration_system_create_orchestration_system: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrchestrationSystemPostBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrchestrationSystemSummaryResponse"] | components["schemas"]["OrchestrationSystemDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_orchestration_system_get_orchestration_system: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                orchestration_system_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrchestrationSystemSummaryResponse"] | components["schemas"]["OrchestrationSystemDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_orchestration_system_delete_orchestration_system: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orchestration_system_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_orchestration_system_update_orchestration_system: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                orchestration_system_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrchestrationSystemPatchBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrchestrationSystemSummaryResponse"] | components["schemas"]["OrchestrationSystemDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_data_source_get_data_sources: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                expand_related?: boolean | null;
                /** @description Select one or more fields to order the response by. */
                order_by?: ("name" | "startTime" | "endTime" | "-name" | "-startTime" | "-endTime")[] | null;
                /** @description Filter by workspace ID. */
                workspace_id?: string[];
                /** @description Filter by orchestration system ID. */
                orchestration_system_id?: string[];
                /** @description Filter by associated datastream ID. */
                datastream_id?: string[];
                /** @description Filters by whether the previous job ran successfully. */
                last_run_successful?: boolean | null;
                /** @description Sets the maximum last run time of filtered datastreams. */
                last_run_max?: string | null;
                /** @description Sets the minimum last run time of filtered datastreams. */
                last_run_min?: string | null;
                /** @description Sets the maximum next run time of filtered datastreams. */
                next_run_max?: string | null;
                /** @description Sets the minimum next run time of filtered datastreams. */
                next_run_min?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceSummaryResponse"][] | components["schemas"]["DataSourceDetailResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_data_source_create_data_source: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataSourcePostBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceSummaryResponse"] | components["schemas"]["DataSourceDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_data_source_get_data_source: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                data_source_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceSummaryResponse"] | components["schemas"]["DataSourceDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_data_source_delete_data_source: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                data_source_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_data_source_update_data_source: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                data_source_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataSourcePatchBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceSummaryResponse"] | components["schemas"]["DataSourceDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_data_source_link_datastream: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                data_source_id: string;
                datastream_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_data_source_unlink_datastream: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                data_source_id: string;
                datastream_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_data_archive_get_data_archives: {
        parameters: {
            query?: {
                /** @description Page number (1-based). */
                page?: number | null;
                /** @description The number of items per page. */
                page_size?: number | null;
                expand_related?: boolean | null;
                /** @description Select one or more fields to order the response by. */
                order_by?: ("name" | "startTime" | "endTime" | "-name" | "-startTime" | "-endTime")[] | null;
                /** @description Filter by workspace ID. */
                workspace_id?: string[];
                /** @description Filter by orchestration system ID. */
                orchestration_system_id?: string[];
                /** @description Filter by associated datastream ID. */
                datastream_id?: string[];
                /** @description Filters by whether the previous job ran successfully. */
                last_run_successful?: boolean | null;
                /** @description Sets the maximum last run time of filtered datastreams. */
                last_run_max?: string | null;
                /** @description Sets the minimum last run time of filtered datastreams. */
                last_run_min?: string | null;
                /** @description Sets the maximum next run time of filtered datastreams. */
                next_run_max?: string | null;
                /** @description Sets the minimum next run time of filtered datastreams. */
                next_run_min?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataArchiveSummaryResponse"][] | components["schemas"]["DataArchiveDetailResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_data_archive_create_data_archive: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataArchivePostBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataArchiveSummaryResponse"] | components["schemas"]["DataArchiveDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_data_archive_get_data_archive: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                data_archive_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataArchiveSummaryResponse"] | components["schemas"]["DataArchiveDetailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_data_archive_delete_data_archive: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                data_archive_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_data_archive_update_data_archive: {
        parameters: {
            query?: {
                expand_related?: boolean | null;
            };
            header?: never;
            path: {
                data_archive_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataArchivePatchBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataArchiveSummaryResponse"] | components["schemas"]["DataArchiveDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_data_archive_link_datastream: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                data_archive_id: string;
                datastream_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    etl_views_data_archive_unlink_datastream: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                data_archive_id: string;
                datastream_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
}
